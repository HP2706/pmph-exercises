let primesFlat (n : i64) : []i64 =
  let sq_primes   = [2i64, 3i64, 5i64, 7i64]
  let len  = 8i64
  let (sq_primes, _) =
    loop (sq_primes, len) while len < n do
      -- this is "len = min n (len*len)" 
      -- but without running out of i64 bounds 
      let len = if n / len < len then n else len*len

      let mult_lens = map (\ p -> (len / p) - 1 ) sq_primes
      let flat_size = reduce (+) 0 mult_lens



    -- LECTURE SLIDES:
    --let nested = map (\p ->
      --let m = n ‘div‘ p in -- distribute map
      --let mm1 = m - 1 in -- distribute map
      --let iot = iota mm1 in -- F rule 4
    --  let twom= map (+2) iot in -- F rule 2
    --  let rp = replicate mm1 p in -- F rule 3
    --  in map (\(j,p) -> j*p) (zip twom rp) -- F rule 2
    --  ) sqrt_primes

      -- the thing we are truing to flatten
      --let composite = map (\mm1 ->
        --let iot = scan (+) 0 replicate flat_size 0 --  apply rule 4
        --let twom = map (+2) iot -- F rule 2
        --let rp = replicate mm1 p -- F rule 3
        --in map (\(j,p) -> j*p) (zip twom rp) -- F rule 2
      --) mult_lens

      -- PART: let iot = scan (+) 0 replicate flat_size 0 
      --rule 4 map (scan op) becomes segmented_scan (op)
      
      let flag_array = replicate flat_size true
      let arr = replicate flat_size 1i64  
      let iots = scan (+) 0i64 arr
      in iots

    in iots

let flat_size = n
    let aoa_shp = replicate flat_size flat_size -- we want have a shape array [flat_size, flat_size, ...]
    let aoa_val = replicate flat_size true
    let flag_array = mkFlagArray aoa_shp false aoa_val :> [flat_size*flat_size]bool
    let arr = replicate (flat_size*flat_size) 1i64  
    let iots = segmented_scan (+) 0i64 flag_array arr
    in iots 